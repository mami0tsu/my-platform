name: Terraform Plan

on:
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**/*.tf'

env:
  TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
  TF_CLOUD_ORGANIZATION: ${{ vars.TF_CLOUD_ORGANIZATION }}
  TF_WORKSPACE: ${{ vars.TF_WORKSPACE }}
  CONFIG_DIRECTORY: './terraform'

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        # v4.1.1
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11

      - name: Upload Configuration
        # v.1.0.4
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@a9b5237abdfa0d0510ad3444906147fa424bbdd9
        id: upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.CONFIG_DIRECTORY }}
          speculative: true

      - name: Plan
        # v.1.0.4
        uses: hashicorp/tfc-workflows-github/actions/create-run@a9b5237abdfa0d0510ad3444906147fa424bbdd9
        id: plan
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.upload.outputs.configuration_version_id }}
          plan_only: true

      - name: Get Plan Output
        # v.1.0.4
        uses: hashicorp/tfc-workflows-github/actions/plan-output@a9b5237abdfa0d0510ad3444906147fa424bbdd9
        id: output
        with:
          plan: ${{ fromJSON(steps.plan.outputs.payload).data.relationships.plan.data.id }}

      - name: Update PR
        # v6.4.1
        uses: actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410
        id: comment
        if: success() || failure()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Cloud Plan Output')
            });
            const output = `
                \nTerraform Cloud Plan Output
                \\\`\\\`\\\`
                Status: ${{ steps.output.outputs.status }}
                Plan: ${{ steps.output.outputs.add }} to add, ${{ steps.output.outputs.change }} to change, ${{ steps.output.outputs.destroy }} to destroy.
                \\\`\\\`\\\`
                [Terraform Cloud Plan](${{ steps.plan.outputs.run_link }})
                `;
            if (botComment) {
              github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
              });
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
